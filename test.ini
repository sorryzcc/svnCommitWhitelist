app.post('/', async (req, res) => {
    try {
        const body = req.body;
        logger.info(`Received Request Body: ${JSON.stringify(body)}`);

        // 判断是机器人请求还是 Web 钩子请求
        if (body.from && body.webhook_url) {
            // 处理机器人请求
            let textContent = body.text?.content || '';
            logger.info(`Text Content Received: ${textContent}`);

            // 去掉指令前的“@svn机器人”部分
            textContent = textContent.replace(/^@svn机器人\s*/, '').trim();
            logger.info(`Processed Text Content: ${textContent}`);

            const userAlias = body.from.alias; // 请求者的 alias

            // 匹配“锁库 分支名”指令
            const lockPattern = /^lock\s+(\S+)/;
            const lockMatch = textContent.match(lockPattern);

            // 匹配“开闸 分支名”指令
            const unlockAllPattern = /^unlockall\s+(\S+)/;
            const unlockAllMatch = textContent.match(unlockAllPattern);

            // 匹配“增加一次性白名单 分支名 用户名”指令
            const disposableWhitelistPattern = /^unlock\s+(\S+)\s+@(\S+)(?:$([^)]+)$)?/;
            const disposableWhitelistMatch = textContent.match(disposableWhitelistPattern);
            logger.info(`Lock Match: ${JSON.stringify(lockMatch)}, UnlockAll Match: ${JSON.stringify(unlockAllMatch)}, DisposableWhitelist Match: ${JSON.stringify(disposableWhitelistMatch)}`);

            // 提取分支标识符
            let branchIdentifier = null;

            if (lockMatch) {
                branchIdentifier = lockMatch[1].trim();
            } else if (unlockAllMatch) {
                branchIdentifier = unlockAllMatch[1].trim();
            } else if (disposableWhitelistMatch) {
                branchIdentifier = disposableWhitelistMatch[1].trim();
            }

            // 如果没有匹配到任何指令，返回默认消息
            if (!branchIdentifier) {
                return res.status(200).json({
                    msgtype: 'text',
                    text: {
                        content: `未识别的指令，请重新输入。\n示例：\n lock b01rel\n unlockall b01rel\n unlock b01rel @v_zccgzhang(张匆匆)`
                    }
                });
            }

            // 查询当前分支的永久白名单
            const checkPermissionQuery = `
                SELECT svn_lock_whitelist 
                FROM tb_branch_info 
                WHERE alias = ?
                LIMIT 1
            `;
            const [permissionResults] = await pool.execute(checkPermissionQuery, [branchIdentifier]);

            if (permissionResults.length === 0) {
                logger.info(`分支 ${branchIdentifier} 不存在`);
                return res.status(200).json({
                    msgtype: 'text',
                    text: {
                        content: `分支 ${branchIdentifier} 不存在，请检查分支名称是否正确。`
                    }
                });
            }

            const whitelist = permissionResults[0].svn_lock_whitelist;
            logger.info(`Raw Whitelist Content for Branch ${branchIdentifier}: ${whitelist}`);

            // 将白名单分割为数组并去除多余空格
            const whitelistArray = whitelist.split(',').map(item => item.trim());
            logger.info(`Parsed Whitelist Array for Branch ${branchIdentifier}: ${JSON.stringify(whitelistArray)}`);

            // 检查用户是否在白名单中
            if (!whitelistArray.includes(userAlias)) {
                logger.info(`请求者 ${userAlias} 不在分支 ${branchIdentifier} 的永久白名单中，无权操作`);
                return res.status(200).json({
                    msgtype: 'text',
                    text: {
                        content: `${userAlias} 不在分支 ${branchIdentifier} 的永久白名单内，无权执行此操作。`
                    }
                });
            }

            // 根据指令类型执行对应逻辑
            if (lockMatch) {
                // 处理分支锁定逻辑
                const success = await updateBranchLockStatus(branchIdentifier, 1);
                const replyMessage = success
                    ? `已成功锁定分支 ${branchIdentifier}`
                    : `锁定分支 ${branchIdentifier} 失败，请检查分支是否存在`;
                return res.status(200).json({ msgtype: 'text', text: { content: replyMessage } });
            } else if (unlockAllMatch) {
                // 处理分支解锁逻辑
                const success = await updateBranchLockStatus(branchIdentifier, 0);
                const replyMessage = success
                    ? `已成功解锁分支 ${branchIdentifier}`
                    : `解锁分支 ${branchIdentifier} 失败，请检查分支是否存在`;
                return res.status(200).json({ msgtype: 'text', text: { content: replyMessage } });
            } else if (disposableWhitelistMatch) {
                // 处理增加一次性白名单逻辑
                const targetUserAlias = disposableWhitelistMatch[2].trim(); // 目标用户标识
                const targetUserName = disposableWhitelistMatch[3]?.trim() || ''; // 目标用户名（可选）

                // 调用增加一次性白名单逻辑
                const success = await addDisposableWhitelist(branchIdentifier, targetUserAlias);

                // 构造回复消息
                let replyMessage = '';
                if (success) {
                    replyMessage = `已成功为分支 ${branchIdentifier} 增加一次性白名单用户 ${targetUserName ? `${targetUserName}(${targetUserAlias})` : targetUserAlias}`;
                } else {
                    replyMessage = `为分支 ${branchIdentifier} 增加一次性白名单用户 ${targetUserName ? `${targetUserName}(${targetUserAlias})` : targetUserAlias} 失败，请检查分支或用户信息`;
                }

                return res.status(200).json({ msgtype: 'text', text: { content: replyMessage } });
            }
        } else if (body.user_name && body.operation_kind && body.event_type) {
            // 处理 Web 钩子请求
            const result = await handleWebhookRequest(body);
            return res.status(result.status).json(result);
        } else {
            // 未知请求类型
            return res.status(400).json({ status: 400, message: "Unknown request type." });
        }
    } catch (error) {
        logger.error(error.message);
        return res.status(500).json({ status: 500, message: error.message });
    }
});

INFO: Received Request Body: {"from":{"userid":"T02260039A","name":"张匆匆","alias":"v_zccgzhang"},"webhook_url":"http://in.qyapi.weixin.qq.com/cgi-bin/webhook/send?key=3569ccde-41a7-4084-8bc7-31679b875e15","chatid":"wrkSFfCgAAJQyxQI1nnFqXMwE9_3bWbA","get_chat_info_url":"http://in.qyapi.weixin.qq.com/cgi-bin/webhook/get_chat_info?code=BpyQbVIZF41kXEsX_YteqtfXcoz658s3toUiuQ0C9HU","msgid":"CIGABBDqsIjABhjzsuLdlICAAyDEAw==","chattype":"group","msgtype":"text","text":{"content":"@svn机器人  unlock b01rel @vayneli(李峥旭) @anduyinliu(刘志钢) @helenwu(吴雪瑞) @goldenjiang(江昕倍) @lincali(李佳霖) "}}
INFO: Text Content Received: @svn机器人  unlock b01rel @vayneli(李峥旭) @anduyinliu(刘志钢) @helenwu(吴雪瑞) @goldenjiang(江昕倍) @lincali(李佳霖) 
INFO: Processed Text Content: unlock b01rel @vayneli(李峥旭) @anduyinliu(刘志钢) @helenwu(吴雪瑞) @goldenjiang(江昕倍) @lincali(李佳霖)
INFO: Lock Match: null, UnlockAll Match: null, DisposableWhitelist Match: ["unlock b01rel @vayneli(李峥旭)","b01rel","vayneli(李峥旭)",null]
INFO: Raw Whitelist Content for Branch b01rel: pmgameclient,v_zccgzhang
INFO: Parsed Whitelist Array for Branch b01rel: ["pmgameclient","v_zccgzhang"]
INFO: 成功为分支 b01rel 增加一次性白名单用户 vayneli(李峥旭)

增加的少了，应该是这些人全部增加进去，@vayneli(李峥旭) @anduyinliu(刘志钢) @helenwu(吴雪瑞) @goldenjiang(江昕倍) @lincali(李佳霖)